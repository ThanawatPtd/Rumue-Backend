// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: priority.sql

package dbmodel

import (
	"context"
)

const createPriority = `-- name: CreatePriority :one
INSERT INTO "priority" (
    id, rate
) VALUES (
    $1, $2
)
RETURNING id, rate
`

type CreatePriorityParams struct {
	ID   string  `json:"id"`
	Rate float64 `json:"rate"`
}

func (q *Queries) CreatePriority(ctx context.Context, arg CreatePriorityParams) (Priority, error) {
	row := q.db.QueryRow(ctx, createPriority, arg.ID, arg.Rate)
	var i Priority
	err := row.Scan(&i.ID, &i.Rate)
	return i, err
}

const deletePriority = `-- name: DeletePriority :exec
DELETE FROM "priority"
WHERE id = $1
`

func (q *Queries) DeletePriority(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePriority, id)
	return err
}

const getPriorities = `-- name: GetPriorities :many
SELECT
    id, 
    rate
FROM "priority"
`

func (q *Queries) GetPriorities(ctx context.Context) ([]Priority, error) {
	rows, err := q.db.Query(ctx, getPriorities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Priority
	for rows.Next() {
		var i Priority
		if err := rows.Scan(&i.ID, &i.Rate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPriority = `-- name: GetPriority :one
SELECT
    rate
FROM "priority"
WHERE id = $1
`

func (q *Queries) GetPriority(ctx context.Context, id string) (float64, error) {
	row := q.db.QueryRow(ctx, getPriority, id)
	var rate float64
	err := row.Scan(&rate)
	return rate, err
}
