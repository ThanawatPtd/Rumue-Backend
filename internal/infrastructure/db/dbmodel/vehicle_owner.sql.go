// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vehicle_owner.sql

package dbmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVehicleOwner = `-- name: CreateVehicleOwner :one
INSERT INTO "vehicle_owner"(
    user_id, vehicle_id, created_at, updated_at
) VALUES(
    $1, $2, NOW(), NOW()
)RETURNING user_id, vehicle_id
`

type CreateVehicleOwnerParams struct {
	UserID    pgtype.UUID `json:"userId"`
	VehicleID pgtype.UUID `json:"vehicleId"`
}

type CreateVehicleOwnerRow struct {
	UserID    pgtype.UUID `json:"userId"`
	VehicleID pgtype.UUID `json:"vehicleId"`
}

func (q *Queries) CreateVehicleOwner(ctx context.Context, arg CreateVehicleOwnerParams) (CreateVehicleOwnerRow, error) {
	row := q.db.QueryRow(ctx, createVehicleOwner, arg.UserID, arg.VehicleID)
	var i CreateVehicleOwnerRow
	err := row.Scan(&i.UserID, &i.VehicleID)
	return i, err
}

const getAllVehicleOwner = `-- name: GetAllVehicleOwner :many
SELECT
    user_id,
    vehicle_id
from "vehicle_owner"
`

type GetAllVehicleOwnerRow struct {
	UserID    pgtype.UUID `json:"userId"`
	VehicleID pgtype.UUID `json:"vehicleId"`
}

func (q *Queries) GetAllVehicleOwner(ctx context.Context) ([]GetAllVehicleOwnerRow, error) {
	rows, err := q.db.Query(ctx, getAllVehicleOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVehicleOwnerRow
	for rows.Next() {
		var i GetAllVehicleOwnerRow
		if err := rows.Scan(&i.UserID, &i.VehicleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVehicleOwnerByUserId = `-- name: GetAllVehicleOwnerByUserId :many
SELECT
    user_id,
    vehicle_id
from "vehicle_owner"
WHERE user_id = $1
`

type GetAllVehicleOwnerByUserIdRow struct {
	UserID    pgtype.UUID `json:"userId"`
	VehicleID pgtype.UUID `json:"vehicleId"`
}

func (q *Queries) GetAllVehicleOwnerByUserId(ctx context.Context, userID pgtype.UUID) ([]GetAllVehicleOwnerByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getAllVehicleOwnerByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVehicleOwnerByUserIdRow
	for rows.Next() {
		var i GetAllVehicleOwnerByUserIdRow
		if err := rows.Scan(&i.UserID, &i.VehicleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVehicleOwnerByBothId = `-- name: GetVehicleOwnerByBothId :one
SELECT
    user_id,
    vehicle_id
from "vehicle_owner"
WHERE user_id = $1 and vehicle_id = $2
`

type GetVehicleOwnerByBothIdParams struct {
	UserID    pgtype.UUID `json:"userId"`
	VehicleID pgtype.UUID `json:"vehicleId"`
}

type GetVehicleOwnerByBothIdRow struct {
	UserID    pgtype.UUID `json:"userId"`
	VehicleID pgtype.UUID `json:"vehicleId"`
}

func (q *Queries) GetVehicleOwnerByBothId(ctx context.Context, arg GetVehicleOwnerByBothIdParams) (GetVehicleOwnerByBothIdRow, error) {
	row := q.db.QueryRow(ctx, getVehicleOwnerByBothId, arg.UserID, arg.VehicleID)
	var i GetVehicleOwnerByBothIdRow
	err := row.Scan(&i.UserID, &i.VehicleID)
	return i, err
}
