// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoice.sql

package dbmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO "invoice" (
    transaction_id, price, invoice_image_url
) VALUES (
    $1, $2, $3
)
RETURNING id, transaction_id, price, invoice_image_url
`

type CreateInvoiceParams struct {
	TransactionID   pgtype.UUID `json:"transactionId"`
	Price           float64     `json:"price"`
	InvoiceImageUrl string      `json:"invoiceImageUrl"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice, arg.TransactionID, arg.Price, arg.InvoiceImageUrl)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.Price,
		&i.InvoiceImageUrl,
	)
	return i, err
}

const getAllInvoices = `-- name: GetAllInvoices :many
SELECT
    id,
    transaction_id,
    price,
    invoice_image_url
from "invoice"
`

func (q *Queries) GetAllInvoices(ctx context.Context) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, getAllInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.Price,
			&i.InvoiceImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT
    id,
    transaction_id,
    price,
    invoice_image_url
from "invoice"
WHERE id = $1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id pgtype.UUID) (Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoiceByID, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.Price,
		&i.InvoiceImageUrl,
	)
	return i, err
}
