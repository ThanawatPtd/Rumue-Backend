// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employee.sql

package dbmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO "employee" (
    id, salary, created_at, updated_at
) VALUES (
    $1, $2, NOW(), NOW()
)
RETURNING id, salary, created_at
`

type CreateEmployeeParams struct {
	ID     pgtype.UUID   `json:"id"`
	Salary pgtype.Float4 `json:"salary"`
}

type CreateEmployeeRow struct {
	ID        pgtype.UUID        `json:"id"`
	Salary    pgtype.Float4      `json:"salary"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (CreateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, createEmployee, arg.ID, arg.Salary)
	var i CreateEmployeeRow
	err := row.Scan(&i.ID, &i.Salary, &i.CreatedAt)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM "employee"
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getAllEmployees = `-- name: GetAllEmployees :many
SELECT
   id,
   salary,
   created_at,
   updated_at 
FROM "employee"
`

func (q *Queries) GetAllEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, getAllEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Salary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT
    id,
    salary,
    created_at,
    updated_at 
FROM "employee"
WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id pgtype.UUID) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Salary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE "employee"
SET
    salary = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, salary, updated_at
`

type UpdateEmployeeParams struct {
	ID     pgtype.UUID   `json:"id"`
	Salary pgtype.Float4 `json:"salary"`
}

type UpdateEmployeeRow struct {
	ID        pgtype.UUID        `json:"id"`
	Salary    pgtype.Float4      `json:"salary"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (UpdateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, updateEmployee, arg.ID, arg.Salary)
	var i UpdateEmployeeRow
	err := row.Scan(&i.ID, &i.Salary, &i.UpdatedAt)
	return i, err
}
