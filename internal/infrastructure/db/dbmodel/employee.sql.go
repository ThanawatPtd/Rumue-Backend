// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employee.sql

package dbmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee (
    id, email, fname, lname, password, phone_number, address, salary, position, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW()
)
RETURNING id, fname AS name, email, salary, position, created_at, updated_at
`

type CreateEmployeeParams struct {
	ID          pgtype.UUID `json:"id"`
	Email       string      `json:"email"`
	Fname       string      `json:"fname"`
	Lname       string      `json:"lname"`
	Password    string      `json:"password"`
	PhoneNumber string      `json:"phoneNumber"`
	Address     string      `json:"address"`
	Salary      float32     `json:"salary"`
	Position    string      `json:"position"`
}

type CreateEmployeeRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Salary    float32            `json:"salary"`
	Position  string             `json:"position"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (CreateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.ID,
		arg.Email,
		arg.Fname,
		arg.Lname,
		arg.Password,
		arg.PhoneNumber,
		arg.Address,
		arg.Salary,
		arg.Position,
	)
	var i CreateEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Salary,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getAllEmployees = `-- name: GetAllEmployees :many
SELECT
    e.id,
    e.fname AS name,
    e.email,
    e.salary,
    e.position,
    e.created_at,
    e.updated_at
FROM employee e
`

type GetAllEmployeesRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Salary    float32            `json:"salary"`
	Position  string             `json:"position"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) GetAllEmployees(ctx context.Context) ([]GetAllEmployeesRow, error) {
	rows, err := q.db.Query(ctx, getAllEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEmployeesRow
	for rows.Next() {
		var i GetAllEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Salary,
			&i.Position,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT
    e.id,
    e.fname AS name,
    e.email,
    e.salary,
    e.position,
    e.created_at,
    e.updated_at
FROM employee e
WHERE e.id = $1
`

type GetEmployeeByIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Salary    float32            `json:"salary"`
	Position  string             `json:"position"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) GetEmployeeByID(ctx context.Context, id pgtype.UUID) (GetEmployeeByIDRow, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i GetEmployeeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Salary,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employee
SET
    email = $2,
    fname = $3,
    lname = $4,
    password = $5,
    phone_number = $6,
    address = $7,
    salary = $8,
    position = $9,
    updated_at = NOW()
WHERE id = $1
RETURNING id, fname AS name, email, salary, position, created_at, updated_at
`

type UpdateEmployeeParams struct {
	ID          pgtype.UUID `json:"id"`
	Email       string      `json:"email"`
	Fname       string      `json:"fname"`
	Lname       string      `json:"lname"`
	Password    string      `json:"password"`
	PhoneNumber string      `json:"phoneNumber"`
	Address     string      `json:"address"`
	Salary      float32     `json:"salary"`
	Position    string      `json:"position"`
}

type UpdateEmployeeRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Salary    float32            `json:"salary"`
	Position  string             `json:"position"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (UpdateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.ID,
		arg.Email,
		arg.Fname,
		arg.Lname,
		arg.Password,
		arg.PhoneNumber,
		arg.Address,
		arg.Salary,
		arg.Position,
	)
	var i UpdateEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Salary,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
