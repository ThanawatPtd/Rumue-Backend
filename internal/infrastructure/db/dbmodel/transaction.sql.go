// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package dbmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transaction" (
    vehicle_owner_id, transaction_type, transaction_status, request_date, response_date, e_slip_image_url, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, NOW(), NOW()
)
RETURNING id, vehicle_owner_id, transaction_type, transaction_status, request_date, response_date, e_slip_image_url
`

type CreateTransactionParams struct {
	VehicleOwnerID    pgtype.UUID        `json:"vehicleOwnerId"`
	TransactionType   string             `json:"transactionType"`
	TransactionStatus string             `json:"transactionStatus"`
	RequestDate       pgtype.Timestamptz `json:"requestDate"`
	ResponseDate      pgtype.Timestamptz `json:"responseDate"`
	ESlipImageUrl     pgtype.Text        `json:"eSlipImageUrl"`
}

type CreateTransactionRow struct {
	ID                pgtype.UUID        `json:"id"`
	VehicleOwnerID    pgtype.UUID        `json:"vehicleOwnerId"`
	TransactionType   string             `json:"transactionType"`
	TransactionStatus string             `json:"transactionStatus"`
	RequestDate       pgtype.Timestamptz `json:"requestDate"`
	ResponseDate      pgtype.Timestamptz `json:"responseDate"`
	ESlipImageUrl     pgtype.Text        `json:"eSlipImageUrl"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (CreateTransactionRow, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.VehicleOwnerID,
		arg.TransactionType,
		arg.TransactionStatus,
		arg.RequestDate,
		arg.ResponseDate,
		arg.ESlipImageUrl,
	)
	var i CreateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.VehicleOwnerID,
		&i.TransactionType,
		&i.TransactionStatus,
		&i.RequestDate,
		&i.ResponseDate,
		&i.ESlipImageUrl,
	)
	return i, err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT
    id,
    vehicle_owner_id,
    transaction_type,
    transaction_status,
    request_date,
    response_date,
    e_slip_image_url
FROM "transaction"
`

type GetAllTransactionsRow struct {
	ID                pgtype.UUID        `json:"id"`
	VehicleOwnerID    pgtype.UUID        `json:"vehicleOwnerId"`
	TransactionType   string             `json:"transactionType"`
	TransactionStatus string             `json:"transactionStatus"`
	RequestDate       pgtype.Timestamptz `json:"requestDate"`
	ResponseDate      pgtype.Timestamptz `json:"responseDate"`
	ESlipImageUrl     pgtype.Text        `json:"eSlipImageUrl"`
}

func (q *Queries) GetAllTransactions(ctx context.Context) ([]GetAllTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTransactionsRow
	for rows.Next() {
		var i GetAllTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.VehicleOwnerID,
			&i.TransactionType,
			&i.TransactionStatus,
			&i.RequestDate,
			&i.ResponseDate,
			&i.ESlipImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
