// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package dbmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transaction" (
    user_id, vehicle_id, insurance_type, transaction_status, request_date, e_slip_image_url, car_registration_image_url, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), $5, $6, NOW(), NOW()
)
RETURNING id, user_id, vehicle_id, insurance_type, transaction_status, request_date, response_date, e_slip_image_url, car_registration_image_url, compulsory_insurance_policy_number,
voluntary_insurance_policy_number
`

type CreateTransactionParams struct {
	UserID                  pgtype.UUID `json:"userId"`
	VehicleID               pgtype.UUID `json:"vehicleId"`
	InsuranceType           string      `json:"insuranceType"`
	TransactionStatus       string      `json:"transactionStatus"`
	ESlipImageUrl           string      `json:"eSlipImageUrl"`
	CarRegistrationImageUrl string      `json:"carRegistrationImageUrl"`
}

type CreateTransactionRow struct {
	ID                              pgtype.UUID        `json:"id"`
	UserID                          pgtype.UUID        `json:"userId"`
	VehicleID                       pgtype.UUID        `json:"vehicleId"`
	InsuranceType                   string             `json:"insuranceType"`
	TransactionStatus               string             `json:"transactionStatus"`
	RequestDate                     pgtype.Timestamptz `json:"requestDate"`
	ResponseDate                    pgtype.Timestamptz `json:"responseDate"`
	ESlipImageUrl                   string             `json:"eSlipImageUrl"`
	CarRegistrationImageUrl         string             `json:"carRegistrationImageUrl"`
	CompulsoryInsurancePolicyNumber pgtype.Text        `json:"compulsoryInsurancePolicyNumber"`
	VoluntaryInsurancePolicyNumber  pgtype.Text        `json:"voluntaryInsurancePolicyNumber"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (CreateTransactionRow, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.UserID,
		arg.VehicleID,
		arg.InsuranceType,
		arg.TransactionStatus,
		arg.ESlipImageUrl,
		arg.CarRegistrationImageUrl,
	)
	var i CreateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VehicleID,
		&i.InsuranceType,
		&i.TransactionStatus,
		&i.RequestDate,
		&i.ResponseDate,
		&i.ESlipImageUrl,
		&i.CarRegistrationImageUrl,
		&i.CompulsoryInsurancePolicyNumber,
		&i.VoluntaryInsurancePolicyNumber,
	)
	return i, err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT
    id,
    user_id,
    vehicle_id,
    insurance_type,
    transaction_status,
    request_date,
    response_date,
    e_slip_image_url,
    car_registration_image_url,
    compulsory_insurance_policy_number,
    voluntary_insurance_policy_number 
FROM "transaction"
`

type GetAllTransactionsRow struct {
	ID                              pgtype.UUID        `json:"id"`
	UserID                          pgtype.UUID        `json:"userId"`
	VehicleID                       pgtype.UUID        `json:"vehicleId"`
	InsuranceType                   string             `json:"insuranceType"`
	TransactionStatus               string             `json:"transactionStatus"`
	RequestDate                     pgtype.Timestamptz `json:"requestDate"`
	ResponseDate                    pgtype.Timestamptz `json:"responseDate"`
	ESlipImageUrl                   string             `json:"eSlipImageUrl"`
	CarRegistrationImageUrl         string             `json:"carRegistrationImageUrl"`
	CompulsoryInsurancePolicyNumber pgtype.Text        `json:"compulsoryInsurancePolicyNumber"`
	VoluntaryInsurancePolicyNumber  pgtype.Text        `json:"voluntaryInsurancePolicyNumber"`
}

func (q *Queries) GetAllTransactions(ctx context.Context) ([]GetAllTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTransactionsRow
	for rows.Next() {
		var i GetAllTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VehicleID,
			&i.InsuranceType,
			&i.TransactionStatus,
			&i.RequestDate,
			&i.ResponseDate,
			&i.ESlipImageUrl,
			&i.CarRegistrationImageUrl,
			&i.CompulsoryInsurancePolicyNumber,
			&i.VoluntaryInsurancePolicyNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
